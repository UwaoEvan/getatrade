// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int              @id @default(autoincrement())
  username           String
  email              String           @unique
  phoneNumber        String?
  firstName          String?
  lastName           String?
  hashedPassword     String
  role               String?
  location           String?
  about              String?
  profileUrl         String?
  address            String?
  distanceArea       Int?
  verified           Boolean?         @default(false)
  verificationStatus String?          @default("Not verified")
  averageRating      Float?           @default(0.0)
  status             String?          @default("Active")
  joinDate           DateTime?        @default(now())
  deactivatedOn      DateTime?
  job                Job[]
  interest           Interest[]
  shortlist          Shortlist[]
  payments           Payments[]
  sentMessages       Message[]        @relation("SentMessages")
  receivedMessages   Message[]        @relation("ReceivedMessages")
  verification       Verification[]
  portfolioImages    PortfolioImage[]

  @@map("user")
}

model Verification {
  id              String    @id @default(uuid())
  userId          Int
  user            User      @relation(fields: [userId], references: [id])
  status          String    @default("Pending")
  createdAt       DateTime  @default(now())
  url             String
  filename        String
  documentType    String?
  reviewedAt      DateTime?
  reviewedBy      String?
  rejectionReason String?

  @@map("verification")
}

model Job {
  id          String      @id @default(uuid())
  title       String
  description String
  category    String
  project     String
  createdAt   DateTime    @default(now())
  closedAt    DateTime?
  active      Boolean?    @default(true)
  location    String
  userId      Int
  price       Float?      @default(10.00)
  interested  Int?        @default(0)
  shortlisted Int?        @default(0)
  user        User        @relation(fields: [userId], references: [id])
  interest    Interest[]
  shortlist   Shortlist[]
  payments    Payments[]
  closed      Closed[]
  reviews     Reviews[]

  @@map("job")
}

model Interest {
  id        String   @id @default(uuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])

  @@map("interest")
}

model Shortlist {
  id        String   @id @default(uuid())
  jobId     String
  userId    Int
  paid      Boolean? @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  job       Job      @relation(fields: [jobId], references: [id])

  @@map("shortlist")
}

model Closed {
  id       String   @id @default(uuid())
  jobId    String
  closedAt DateTime @default(now())
  job      Job      @relation(fields: [jobId], references: [id])

  @@map("closed")
}

model Payments {
  id          String    @id @default(uuid())
  amount      Float     @default(0.00)
  description String
  userId      Int
  jobId       String
  createdAt   DateTime? @default(now())
  status      String?   @default("NOT PAID")
  job         Job       @relation(fields: [jobId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Reviews {
  id             String    @id @default(uuid())
  rating         Int
  createdAt      DateTime  @default(now())
  review         String
  customerId     Int
  tradesPersonId Int
  reply          String?
  replyCreatedAt DateTime?
  jobId          String
  jobTitle       String?
  creator        String?
  job            Job       @relation(fields: [jobId], references: [id])

  @@map("reviews")
}

model PortfolioImage {
  id        String   @id @default(cuid())
  url       String
  filename  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])

  @@map("portfolio_images")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  read       Boolean  @default(false)
  senderId   Int
  receiverId Int
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@map("message")
}
